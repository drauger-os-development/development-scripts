#!/bin/bash
set -e
if [ -f $HOME/.config/drauger/make-iso.conf ]; then
	eval $(grep -v '^#' $HOME/.config/drauger/make-iso.conf)
else
	echo "Running first-time config..."
	mkdir -p $HOME/.config/drauger
	CHROOT_PREFIX=$(zenity --entry --text="What is the folder your chroots are stored in? This folder should contain a structure of ARCH/CODENAME,\nwhere ARCH is the CPU arch of the chroot, and codename is the codename of the OS in the chroot.")
	BUILD_PREFIX=$(zenity --entry --text="Where would you like the ISOs to be built? Default is /tmp/build.")
	BUILD_PREFIX=${BUILD_PREFIX:-"/tmp/build"}
	ISO_PREFIX=$(zenity --entry --text="Where would you like the ISOs to be stored? Default is ~/Downloads.")
	ISO_PREFIX=${ISO_PREFIX:-"$HOME/Downloads"}
	KERNEL=$(zenity --entry --text="What kernel would you like to use? Default is linux-drauger.")
	KERNEL=${KERNEL:-"linux-drauger"}
	builtin echo -e "# Make-ISO config
# Don't end file paths with forward-slashes
# Chroot location
CHROOT_PREFIX=$CHROOT_PREFIX
# Location to build ISOs
BUILD_PREFIX=$BUILD_PREFIX
# Location to store ISOs
ISO_PREFIX=$ISO_PREFIX
# Kernel to use
KERNEL=$KERNEL" > $HOME/.config/drauger/make-iso.conf
fi

needed=""
if ! $(which mksquashfs 1>/dev/null 2>/dev/null); then
	needed="squashfs-tools"
fi
if ! $(which grub-mkstandalone 1>/dev/null 2>/dev/null); then
	needed="$needed grub-common"
fi
if ! $(which xorriso 1>/dev/null 2>/dev/null); then
	needed="$needed xorriso"
fi
if ! $(which zenity 1>/dev/null 2>/dev/null); then
	needed="$needed zenity"
fi
if ! $(which notify-send 1>/dev/null 2>/dev/null); then
	needed="$needed libnotify-bin"
fi
if ! $(which mmd 1>/dev/null 2>/dev/null); then
	needed="$needed mtools"
fi
if ! $(which mkfs.vfat 1>/dev/null 2>/dev/null); then
	needed="$needed dosfstool"
fi
if [ ! -f /usr/lib/grub/x86_64-efi/modinfo.sh ]; then
	needed="$needed grub-efi-amd64-bin"
fi
if [ ! -f /usr/lib/grub/i386-pc/modinfo.sh ]; then
	needed="$needed grub-pc-bin"
fi

if [[ "$needed" != "" ]]; then
	echo "Error: Missing depedencies. Please install the following packages to use this script." 1>&2
	echo "Depedencies:" 1>&2
	echo "$needed" 1>&2
	exit 2
fi

clean () {
	echo "Cleaning Build Prefix . . . "
	rm -rfv $BUILD_PREFIX
	echo "Done"
	mkdir -p $BUILD_PREFIX
	exit
}

ARCH="$1"
CODENAME="$2"

if [ "$ARCH" == "arm" ] || [ "$ARCH" == "arm64" ] || [ "$ARCH" == "ARM" ] || [ "$ARCH" == "ARM64" ]; then
	ARCH="ARM64"
elif [ "$ARCH" == "-h" ] || [ "$ARCH" == "--help" ]; then
	echo -e "
make-iso [--help, --clean] [ARCH] [CODENAME]
		Pass the Arch and the codename to build an ISO for that version of Drauger OS,
		provided the chroot is in the correct location.


	-c, --clean	Clean build directory
	-h, --help	Print this help dialoge and exit.

"
	exit 0
elif [ "$ARCH" == "-c" ] || [ "$ARCH" == "--clean" ]; then
	clean
else
	ARCH="AMD64"
fi


CHROOT_LOCATION="$CHROOT_PREFIX/$ARCH/$CODENAME"

read -p "Please make sure that you only have one kernel installed. Press enter when you are sure this is the case inside the chroot.
Furthermore, please ensure that /proc has been unmounted." ans

function_makeiso () {
	echo "Making $ARCH ISO"
	if [ ! -d "$BUILD_PREFIX" ]; then
		mkdir -p "$BUILD_PREFIX"
	fi
	cd $BUILD_PREFIX
	VERSION=$(cat $CHROOT_LOCATION/etc/lsb-release | grep 'DISTRIB_RELEASE=' | sed 's/DISTRIB_RELEASE=//g')
	#clean up the chroot
	sudo rm -rf $CHROOT_LOCATION/var/crash/* $CHROOT_LOCATION/root/* $CHROOT_LOCATION/home/live/.bash_history $CHROOT_LOCATION/var/log/*
	#make work files
	mkdir -p {$BUILD_PREFIX/scratch,$BUILD_PREFIX/image/live}
	echo -e "\nMaking Squashfs\n"
	notify-send --app-name="make-iso" "Making Squashfs"
	#make Squashfs from chroot
	sudo mksquashfs $CHROOT_LOCATION $BUILD_PREFIX/image/live/filesystem.squashfs -comp xz -Xbcj x86 -Xdict-size 8k -e boot && notify-send --app-name="make-iso" "Squashfs Completed"
	#copy initrd and kernel
	cp $CHROOT_LOCATION/boot/vmlinuz-* $BUILD_PREFIX/image/vmlinuz
	cp $CHROOT_LOCATION/boot/initrd.img-* $BUILD_PREFIX/image/initrd || cp $CHROOT_LOCATION/boot/initrd.img $BUILD_PREFIX/image/initrd
	echo -e "search --set=root --file /DRAUGER_OS

insmod all_video

set default=\"0\"\nset timeout=30

menuentry \"Install Drauger OS $VERSION\" {
	linux /vmlinuz boot=live quiet splash nomodeset system-installer
	initrd /initrd
}

menuentry \"Try Drauger OS $VERSION\" {
	linux /vmlinuz boot=live quiet splash
	initrd /initrd
}

menuentry \"Try Drauger OS $VERSION In Safe Graphics Mode\" {
	linux /vmlinuz boot=live quiet splash nomodeset
	initrd /initrd
}


EOF" > $BUILD_PREFIX/scratch/grub.cfg
	touch $BUILD_PREFIX/image/DRAUGER_OS
	echo -e "\nSetting up for EFI\n"
	notify-send --app-name="make-iso" "Setting up for EFI"
	#setup for EFI
	grub-mkstandalone --format=x86_64-efi --output=$BUILD_PREFIX/scratch/bootx64.efi --locales="" --fonts=""  "boot/grub/grub.cfg=$BUILD_PREFIX/scratch/grub.cfg"
	(cd $BUILD_PREFIX/scratch && dd if=/dev/zero of=efiboot.img bs=1M count=10 && mkfs.vfat efiboot.img && mmd -i efiboot.img efi efi/boot && mcopy -i efiboot.img ./bootx64.efi ::efi/boot/ )
	echo -e "\nSetting up for BIOS\n"
	notify-send --app-name="make-iso" "Setting up for BIOS"
	#setup for BIOS
	grub-mkstandalone --format=i386-pc --output=$BUILD_PREFIX/scratch/core.img --install-modules="linux normal iso9660 biosdisk memdisk search tar ls" --modules="linux normal iso9660 biosdisk search" --locales="" --fonts=""  "boot/grub/grub.cfg=$BUILD_PREFIX/scratch/grub.cfg"
	cat /usr/lib/grub/i386-pc/cdboot.img $BUILD_PREFIX/scratch/core.img > $BUILD_PREFIX/scratch/bios.img
	# MAKE DEB REPO
	echo -e "\nSetting up local deb repo\n"
	notify-send --app-name="make-iso" "Setting up local deb repo"
	mkdir -p $BUILD_PREFIX/image/repo
	deps=$(apt-cache depends "$KERNEL" | grep 'Depends:' | awk '{print $2}')
	deps="$deps $KERNEL systemd-boot-manager python3-distutils python3-lib2to3"
	base="$PWD"
	cd $BUILD_PREFIX/image/repo
	apt-get download $deps
	cd "$base"
	# DONE MAKING REPO
	#make the ISO
	notify-send --app-name="make-iso" "Name ISO Please"
	output=$(zenity --entry --text="What would you like to name the new ISO?" --entry-text="Please leave the .iso at the end off")
	echo -e "\nMaking ISO\n"
	notify-send --app-name="make-iso" "Making ISO"
	if [ -f "$ISO_PREFIX/$output-$ARCH.iso" ]; then
		rm -fv "$ISO_PREFIX/$output-$ARCH.iso"
	fi
	xorriso -as mkisofs -iso-level 3 -full-iso9660-filenames -volid "Drauger OS $VERSION" -eltorito-boot boot/grub/bios.img -no-emul-boot -boot-load-size 4 -boot-info-table --eltorito-catalog boot/grub/boot.cat --grub2-boot-info --grub2-mbr /usr/lib/grub/i386-pc/boot_hybrid.img -eltorito-alt-boot -e EFI/efiboot.img -no-emul-boot -append_partition 2 0xef $BUILD_PREFIX/scratch/efiboot.img -output "$ISO_PREFIX/$output-$ARCH.iso" -graft-points $BUILD_PREFIX/image /boot/grub/bios.img=$BUILD_PREFIX/scratch/bios.img /EFI/efiboot.img=$BUILD_PREFIX/scratch/efiboot.img /boot/grub/grub.cfg=$BUILD_PREFIX/scratch/grub.cfg && (echo -e "\nISO Completed!\n"; notify-send --app-name="make-iso" "ISO Completed!")
	rm -rf image scratch
	chmod 644 "$ISO_PREFIX/$output-$ARCH.iso"
}

{ time function_makeiso 2>&1; } 2>$HOME/.time.log
min=$(cat $HOME/.time.log | grep 'real' | sed 's/real\t//g' | sed 's/m.*//g')
sec=$(cat $HOME/.time.log | grep 'real' | sed 's/.*m//g' | sed 's/s//g')
if [ ! -f $HOME/Documents/.running-time.log ]; then
	echo -e "Drauger OS Development Time Log\nDO NOT MODIFY OR DELETE\nMINUTES\tSECONDS" > $HOME/Documents/.running-time.log
fi
echo -e "$min\t$sec" >> $HOME/Documents/.running-time.log
echo -e "\nTime Logged\n"
