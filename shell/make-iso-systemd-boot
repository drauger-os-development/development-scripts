#!/bin/bash
# -*- coding: utf-8 -*-
#
#  make-iso-systemd-boot
#
#  Copyright 2025 Thomas Castleman <batcastle@draugeros.org>
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#  MA 02110-1301, USA.
#
#
set -e

function ask ()
{
		if [ "$MKISO_HEADLESS_MODE" == "" ]; then
			if [ "$XDG_SESSION_TYPE" == "tty" ]; then
					builtin read -p "$1 :  " output
			else
					output=$(zenity --entry --text="$1")
			fi
		else
			if $(echo "$1" | grep -q "chroots are stored in"); then
				output="$MKISO_STORAGE_FOLDER"
			elif $(echo "$1" | grep -q "ISOs to be built"); then
				output="$MKISO_BUILD_FOLDER"
			elif $(echo "$1" | grep -q "kernel"); then
				output="$MKISO_KERNEL"
			elif $(echo "$1" | grep -q "ISOs to be stored"); then
				output="$MKISO_STORE_ISO"
			elif $(echo "$1" | grep -q "name the new ISO"); then
				output="$MKISO_FILE_NAME"
			fi
		fi
        builtin echo "$output"
}

function gain_root_privs ()
{
	sudo -K
	if [ "$EUID" != "0" ]; then
		echo "OBTAINING ROOT PRIVLEGES"
		while true; do
			read -rsp "Obtaining root password for $(whoami): " PASS
			echo -e "\n"
			echo -En "$PASS" | sudo -S --prompt="" --validate 2>/dev/null 1>/dev/null
			if [ "$?" == "0" ]; then
				echo -e "ROOT PRIVLEGES OBTAINED"
				break
			fi
			echo -e "Password incorrect. Please, try again.\n" 1>&2
		done
	fi
}

function root ()
{
	# I REALLY feel uncomfortable with this function. But it works how it should
	# Do not use this function to gain root privs, while also handling a pipe,
	# Data will not be passed correctly through the pipe.
	if [ "$EUID" != "0" ]; then
		echo -En "$PASS" | sudo -S $@
	else
		$@
	fi
}


 function notify ()
 {
         if [ "$XDG_SESSION_TYPE" == "tty" ] || [ "$MKCHROOT_HEADLESS_MODE" != "" ]; then
                 wall "$1"
         else
			# Sometimes, notify-send can fail. When that happens, just call wall and call it a day
			{
				notify-send --app-name="make-iso" "$1"
			} || {
				wall "$1"
				flag="1"
			}
			# If we already called wall, don't echo. It's redundent.
			if [[ "$flag" != "1" ]]; then
				echo -e "\t\t\t### $1 ###"
			fi
         fi
 }

function unmount ()
{
	root umount -l $CHROOT_LOCATION/proc || echo "No need to unmount proc"
	root umount -l $CHROOT_LOCATION/sys/firmware/efi/efivars || echo "No need to unmount efivars"
	root umount -l $CHROOT_LOCATION/sys || echo "No need to unmount sys"
	root umount -l $CHROOT_LOCATION/dev/pts || echo "No need to unmount pts"
	root umount -l $CHROOT_LOCATION/dev/shm || echo "No need to unmount shm"
	root umount -l $CHROOT_LOCATION/dev || echo "No need to unmount dev"
	root umount -l $CHROOT_LOCATION/run || echo "No need to unmount run"
	root umount -l $CHROOT_LOCATION/tmp || echo "No need to unmount tmp"
}

if [ -f $HOME/.config/drauger/make-iso.conf ]; then
	eval $(grep -v '^#' $HOME/.config/drauger/make-iso.conf)
else
	echo "Running first-time config..."
	if [ "$MKISO_HEADLESS_MODE" == "" ]; then
		mkdir -p $HOME/.config/drauger
	fi
	CHROOT_PREFIX=$(ask "What is the folder your chroots are stored in? This folder should contain a structure of ARCH/CODENAME,\nwhere ARCH is the CPU arch of the chroot, and codename is the codename of the OS in the chroot.")
	BUILD_PREFIX=$(ask "Where would you like the ISOs to be built? Default is /tmp/build.")
	BUILD_PREFIX=${BUILD_PREFIX:-"/tmp/build"}
	ISO_PREFIX=$(ask "Where would you like the ISOs to be stored? Default is ~/Downloads.")
	ISO_PREFIX=${ISO_PREFIX:-"$HOME/Downloads"}
	KERNEL=$(ask "What kernel would you like to use? Default is linux-drauger.")
	KERNEL=${KERNEL:-"linux-drauger"}
	if [ "$MKCHROOT_HEADLESS_MODE" == "" ]; then
		builtin echo -e "# Make-ISO config
# Don't end file paths with forward-slashes
# Chroot location
CHROOT_PREFIX=$CHROOT_PREFIX
# Location to build ISOs
BUILD_PREFIX=$BUILD_PREFIX
# Location to store ISOs
ISO_PREFIX=$ISO_PREFIX
# Kernel to use
KERNEL=$KERNEL" > $HOME/.config/drauger/make-iso.conf
	fi
fi

needed=""
if ! $(which mksquashfs 1>/dev/null 2>/dev/null); then
	needed="squashfs-tools"
fi
if ! $(which grub-mkstandalone 1>/dev/null 2>/dev/null); then
	needed="$needed grub-common"
fi
if [ ! -f /usr/lib/systemd/boot/efi/systemd-bootx64.efi ]; then
	needed="$needed systemd-boot-efi"
fi
if ! $(which xorriso 1>/dev/null 2>/dev/null); then
	needed="$needed xorriso"
fi
if ! $(which mmd 1>/dev/null 2>/dev/null); then
	needed="$needed mtools"
fi
if ! $(which mkfs.vfat 1>/dev/null 2>/dev/null); then
	needed="$needed dosfstools"
fi
if [ ! -f /usr/lib/grub/x86_64-efi/modinfo.sh ]; then
	needed="$needed grub-efi-amd64-bin"
fi
if [ ! -f /usr/lib/grub/i386-pc/modinfo.sh ]; then
	needed="$needed grub-pc-bin"
fi
if [ ! -f /usr/bin/find ]; then
	needed="$needed findutils"
fi
if [ ! -f /usr/bin/arch-chroot ]; then
	needed="$needed arch-install-scripts"
fi
if [ "$XDG_SESSION_TYPE" != "tty" ] && [ "$MKISO_HEADLESS_MODE" == "" ]; then
	if ! $(which zenity 1>/dev/null 2>/dev/null); then
    	    needed="$needed zenity"
	fi
	if ! $(which notify-send 1>/dev/null 2>/dev/null); then
    	    needed="$needed libnotify-bin"
	fi
fi
if [[ "$needed" != "" ]]; then
	echo "Error: Missing depedencies. Please install the following packages to use this script." 1>&2
	echo "Depedencies:" 1>&2
	echo "$needed" 1>&2
	exit 2
fi

clean () {
	echo "Cleaning Build Prefix . . . "
	rm -rfv $BUILD_PREFIX
	echo "Done"
	mkdir -p $BUILD_PREFIX
	if [ "$1" == "" ]; then
		exit
	fi
}

ARCH="$1"
CODENAME="$2"

if [ "$ARCH" == "arm" ] || [ "$ARCH" == "arm64" ] || [ "$ARCH" == "ARM" ] || [ "$ARCH" == "ARM64" ]; then
	ARCH="ARM64"
elif [ "$ARCH" == "-h" ] || [ "$ARCH" == "--help" ]; then
	echo -e "
make-iso [--help, --clean] [ARCH] [CODENAME]
		Pass the Arch and the codename to build an ISO for that version of Drauger OS,
		provided the chroot is in the correct location.


	-c, --clean	Clean build directory
	-h, --help	Print this help dialoge and exit.

"
	exit 0
elif [ "$ARCH" == "-c" ] || [ "$ARCH" == "--clean" ]; then
	clean
else
	ARCH="AMD64"
fi


CHROOT_LOCATION="$CHROOT_PREFIX/$ARCH/$CODENAME"

if [ "$MKISO_HEADLESS_MODE" == "" ]; then
	read -p "Please make sure that you only have one kernel installed. Press enter when you are sure this is the case inside the chroot.
Furthermore, please ensure that /proc has been unmounted." ans
fi

function_makeiso () {
	notify "Making $ARCH ISO"
	if [ ! -d "$BUILD_PREFIX" ]; then
		mkdir -p "$BUILD_PREFIX"
	fi
	cd "$BUILD_PREFIX"
	VERSION=$(cat $CHROOT_LOCATION/etc/lsb-release | grep 'DISTRIB_RELEASE=' | sed 's/DISTRIB_RELEASE=//g')
	gain_root_privs
	#clean up the chroot
	{
		root arch-chroot "$CHROOT_LOCATION" flatpak repair
	} || {
		unmount
		root arch-chroot "$CHROOT_LOCATION" flatpak repair
	}
	root rm -rfv $CHROOT_LOCATION/var/crash/* $CHROOT_LOCATION/root/* $CHROOT_LOCATION/home/live/.bash_history $CHROOT_LOCATION/var/log/*
	root rm -rfv $CHROOT_LOCATION/tmp/* $CHROOT_LOCATION/var/lib/apt/lists/* $CHROOT_LOCATION/home/live/.kde/cache-*/* $CHROOT_LOCATION/home/live/.kde4/cache-*/*
	root rm -rfv $CHROOT_LOCATION/home/live/.kde/tmp-*/* $CHROOT_LOCATION/home/live/.kde4/tmp-*/*
	root find $CHROOT_LOCATION/* -depth -name '__pycache__' -exec rm -rfv {} +
	root find $CHROOT_LOCATION/*  -depth -name '*.dpkg-old' -exec rm -rfv {} +
	root find $CHROOT_LOCATION/*  -depth -name '*.deb' -exec rm -rfv {} +
	{
		root arch-chroot "$CHROOT_LOCATION" apt-get clean
	} || {
		unmount
		root arch-chroot "$CHROOT_LOCATION" apt-get clean
	}
	unmount
	{
		root arch-chroot "$CHROOT_LOCATION" apt-get -y autopurge
	} || {
		unmount
		root arch-chroot "$CHROOT_LOCATION" apt-get -y autopurge
	}
	unmount
	root rm -rfv $CHROOT_LOCATION/var/cache/*

	# Confirm we only have one kernel installed, and that there is an associated initrd.img file
	images=$(root arch-chroot "$CHROOT_LOCATION" dpkg -l linux-image* | grep "^ii" | awk '{print $2}')
	unmount
	if [ "$images" != "" ]; then
		versions=$(echo "$images" | sed 's/-/ /g' | awk '{print $3}' | sort -V)
		latest=$(echo "$versions" | tail -n1)
		if [ "$versions" != "$latest" ]; then
			remove=$(echo "$versions" | sort -V | head -n -1)
			for each in $remove; do
				root arch-chroot "$CHROOT_LOCATION" apt-get --assume-yes -y purge linux-image-$each linux-headers-$each
				unmount
			done
		fi
	else
		notify "No kernel is installed! Please install a kernel and try again..."
		exit 1
	fi

	# We have tackled the kernel issues. Now, for the initrd.img file
	version=$(root arch-chroot "$CHROOT_LOCATION" dpkg -l linux-image* | grep "^ii" | awk '{print $2}' | sed 's/-/ /g' | awk '{print $3}')
	unmount
	if [ "$(echo \\"$version\\" | wc -l)" != "1" ]; then
		notify "More than one kernel installed! Please remove all but the latest kernel and try again..."
		exit 1
	fi
	if [ ! -f "$CHROOT_LOCATION/boot/initrd.img-$version" ]; then
		root arch-chroot "$CHROOT_LOCATION" mkinitramfs -o "/boot/initrd.img-$version" $version
	fi


	#make work files
	mkdir -p $BUILD_PREFIX/scratch/EFI/EFI/BOOT $BUILD_PREFIX/image/live
	mkdir -p $BUILD_PREFIX/scratch/EFI/loader/entries
	notify "Making Squashfs"
	#make Squashfs from chroot
	{
		root mksquashfs $CHROOT_LOCATION $BUILD_PREFIX/image/live/filesystem.squashfs -comp xz -Xbcj x86 -Xdict-size 256k -b 1M -e boot -mnoatime -no-xattrs -noappend -dedup
	} && {
		notify "Squashfs Completed"
	}
	#copy initrd and kernel
	cp -v $CHROOT_LOCATION/boot/vmlinuz-* $BUILD_PREFIX/image/vmlinuz
	cp -v $CHROOT_LOCATION/boot/vmlinuz-* $BUILD_PREFIX/scratch/EFI/vmlinuz
	cp -v $CHROOT_LOCATION/boot/initrd.img-* $BUILD_PREFIX/image/initrd || cp -v $CHROOT_LOCATION/boot/initrd.img $BUILD_PREFIX/image/initrd
	cp -v $CHROOT_LOCATION/boot/initrd.img-* $BUILD_PREFIX/scratch/EFI/initrd || cp -v $CHROOT_LOCATION/boot/initrd.img $BUILD_PREFIX/scratch/EFI/initrd
	echo -e "search --set=root --file /DRAUGER_OS

insmod all_video

set default=\"0\"\nset timeout=30

menuentry \"Install Drauger OS $VERSION\" {
	linux /vmlinuz boot=live quiet splash edamame
	initrd /initrd
}

menuentry \"Install Drauger OS $VERSION Using Safe Graphics Mode (nomodeset)\" {
	linux /vmlinuz boot=live quiet splash nomodeset edamame
	initrd /initrd
}

menuentry \"Try Drauger OS $VERSION\" {
	linux /vmlinuz boot=live quiet splash
	initrd /initrd
}

menuentry \"Try Drauger OS $VERSION Using Safe Graphics Mode (nomodeset)\" {
	linux /vmlinuz boot=live quiet splash nomodeset
	initrd /initrd
}


EOF" > $BUILD_PREFIX/scratch/grub.cfg
	touch "$BUILD_PREFIX/image/DRAUGER_OS"
	notify "Setting up for EFI"
	#setup for EFI
	#grub-mkstandalone --format=x86_64-efi --output=$BUILD_PREFIX/scratch/bootx64.efi --locales="" --fonts=""  "boot/grub/grub.cfg=$BUILD_PREFIX/scratch/grub.cfg"
	cp -v /usr/lib/systemd/boot/efi/systemd-bootx64.efi "$BUILD_PREFIX/scratch/EFI/EFI/BOOT/bootx64.efi"
	cp -v /usr/lib/systemd/boot/efi/systemd-bootx64.efi "$BUILD_PREFIX/scratch/EFI/EFI/BOOT/boot.efi"
	echo "default Drauger_OS.conf
timeout 30
editor 1
" > $BUILD_PREFIX/scratch/EFI/loader/loader.conf

	echo "title  Try Drauger_OS $VERSION
linux   /vmlinuz
initrd  /initrd
options boot=live ro rd.luks=0 rd.md=0 rd.live.overlay.overlayfs=1 quiet splash
" > $BUILD_PREFIX/scratch/EFI/loader/entries/Drauger_OS.conf

echo "title  Try Drauger_OS $VERSION (RAMDISK)
linux   /vmlinuz
initrd  /initrd
options boot=live ro rd.luks=0 rd.md=0 rd.live.overlay.overlayfs=1 quiet splash toram
" > $BUILD_PREFIX/scratch/EFI/loader/entries/Drauger_OS_ramdisk.conf

	echo "title  Try Drauger_OS $VERSION Using Safe Graphics Mode (nomodeset)
linux   /vmlinuz
initrd  /initrd
options boot=live ro rd.luks=0 rd.md=0 rd.live.overlay.overlayfs=1 quiet splash nomodeset
" > $BUILD_PREFIX/scratch/EFI/loader/entries/Drauger_OS_nomodeset.conf

	echo "title  Install Drauger_OS $VERSION
linux   /vmlinuz
initrd  /initrd
options boot=live ro rd.luks=0 rd.md=0 rd.live.overlay.overlayfs=1 quiet splash edamame
" > $BUILD_PREFIX/scratch/EFI/loader/entries/Drauger_OS_install.conf

	echo "title  Install Drauger_OS $VERSION Using Safe Graphics Mode (nomodeset)
linux   /vmlinuz
initrd  /initrd
options boot=live ro rd.luks=0 rd.md=0 rd.live.overlay.overlayfs=1 quiet splash nomodeset edamame
" > $BUILD_PREFIX/scratch/EFI/loader/entries/Drauger_OS_install_nomodeset.conf
	cd $BUILD_PREFIX/scratch
	dd if=/dev/zero of=efi.img bs=1M count=250
	mkfs.vfat efi.img
	# mmd -i efi.img -s EFI/* EFI/BOOT
	mcopy -i efi.img -s EFI/* ::
	notify "Setting up for BIOS"
	#setup for BIOS
	grub-mkstandalone --format=i386-pc --output=$BUILD_PREFIX/scratch/core.img --compress=xz --install-modules="linux normal iso9660 biosdisk memdisk fat part_msdos part_gpt search tar ls" --modules="fat part_msdos part_gpt linux normal iso9660 biosdisk search" --locales="" --fonts=""  "boot/grub/grub.cfg=$BUILD_PREFIX/scratch/grub.cfg"
	cat /usr/lib/grub/i386-pc/cdboot.img $BUILD_PREFIX/scratch/core.img > $BUILD_PREFIX/scratch/bios.img
	# MAKE DEB REPO
	notify "Setting up local deb repo"
	mkdir -p $BUILD_PREFIX/image/repo
	base="$PWD"
	root arch-chroot $CHROOT_LOCATION apt-get update
	deps="systemd-boot-manager systemd-boot efibootmgr"
	all_installed=$(root chroot "$CHROOT_LOCATION" dpkg -l)
	all=$(root chroot "$CHROOT_LOCATION" apt-cache depends "$KERNEL")
	all=$(echo "$all" | grep 'Depends:' | awk '{print $2}' | sed -z 's/\n/ /g')
	for each in $deps; do
		test=$(root chroot "$CHROOT_LOCATION" apt-cache depends "$each")
		test=$(echo "$test" | grep 'Depends:' | awk '{print $2}')
		for each1 in $test; do
			if $(echo "$all_installed" | grep "$each" | grep -q "^ii"); then
				echo "" > /dev/null
			else
				all="$all $each"
			fi
		done
	done
	deps="$KERNEL $deps $all"
	cd $BUILD_PREFIX/image/repo
	root arch-chroot $CHROOT_LOCATION apt-get download $deps
	root chroot $CHROOT_LOCATION apt-get clean
	root mv -v $CHROOT_LOCATION/*.deb .
	cd "$base"
	# DONE MAKING REPO
	#make the ISO
	notify "Name ISO Please"
	output=$(ask "What would you like to name the new ISO?")
	notify "Making ISO"
	if [ -f "$ISO_PREFIX/$output-$ARCH.iso" ]; then
		rm -fv "$ISO_PREFIX/$output-$ARCH.iso"
	fi
	if [ ! -d "$ISO_PREFIX" ]; then
		mkdir -p "$ISO_PREFIX"
	fi
	xorriso -as mkisofs -iso-level 2 -full-iso9660-filenames -volid "Drauger_OS_$VERSION" --md5 -eltorito-boot boot/grub/bios.img -no-emul-boot \
	-boot-load-size 4 -boot-info-table --eltorito-catalog boot/grub/boot.cat --grub2-boot-info --grub2-mbr /usr/lib/grub/i386-pc/boot_hybrid.img \
	-eltorito-alt-boot -e efi.img -no-emul-boot -append_partition 2 0xef "$BUILD_PREFIX/scratch/efi.img" -output "$ISO_PREFIX/$output-$ARCH.iso" \
	-graft-points "$BUILD_PREFIX/image" /boot/grub/bios.img="$BUILD_PREFIX/scratch/bios.img" efi.img="$BUILD_PREFIX/scratch/efi.img" \
    /boot/grub/grub.cfg=$BUILD_PREFIX/scratch/grub.cfg && (echo -e "\nISO Completed!\n"; notify "ISO Completed!")
    chmod 644 "$ISO_PREFIX/$output-$ARCH.iso"
	clean 0
}

{ time function_makeiso 2>&1; } 2>"$HOME/.time.log"
min=$(cat $HOME/.time.log | grep 'real' | sed 's/real\t//g' | sed 's/m.*//g')
sec=$(cat $HOME/.time.log | grep 'real' | sed 's/.*m//g' | sed 's/s//g')
if [ ! -f $HOME/Documents/.running-time.log ]; then
	echo -e "Drauger OS Development Time Log\nDO NOT MODIFY OR DELETE\nMINUTES\tSECONDS" > $HOME/Documents/.running-time.log
fi
echo -e "$min\t$sec" >> $HOME/Documents/.running-time.log
echo -e "\nTime Logged\n"
