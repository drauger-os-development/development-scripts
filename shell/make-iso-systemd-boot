#!/bin/bash
set -e

function ask ()
 {
         if [ "$XDG_SESSION_TYPE" == "tty" ]; then
                 builtin read -p "$1 :  " output
         else
                 output=$(zenity --entry --text="$1")
         fi
         builtin echo "$output"
 }


 function notify ()
 {
         if [ "$XDG_SESSION_TYPE" == "tty" ]; then
                 wall "$1"
         else
		# Sometimes, notify-send can fail. When that happens, just call wall and call it a day
		{
                 	notify-send --app-name="make-iso" "$1"
		} || {
			wall "$1"
			flag="1"
		}
		# If we already called wall, don't echo. It's redundent.
		if [[ "$flag" != "1" ]]; then
	                 echo -e "\t\t\t### $1 ###"
		fi
         fi
 }

function unmount ()
{
	sudo umount -l $CHROOT_LOCATION/proc || echo "No need to unmount proc"
	sudo umount -l $CHROOT_LOCATION/sys/firmware/efi/efivars || echo "No need to unmount efivars"
	sudo umount -l $CHROOT_LOCATION/sys || echo "No need to unmount sys"
	sudo umount -l $CHROOT_LOCATION/dev/pts || echo "No need to unmount pts"
	sudo umount -l $CHROOT_LOCATION/dev/shm || echo "No need to unmount shm"
	sudo umount -l $CHROOT_LOCATION/dev || echo "No need to unmount dev"
	sudo umount -l $CHROOT_LOCATION/run || echo "No need to unmount run"
	sudo umount -l $CHROOT_LOCATION/tmp || echo "No need to unmount tmp"
}

if [ -f $HOME/.config/drauger/make-iso.conf ]; then
	eval $(grep -v '^#' $HOME/.config/drauger/make-iso.conf)
else
	echo "Running first-time config..."
	mkdir -p $HOME/.config/drauger
	CHROOT_PREFIX=$(ask "What is the folder your chroots are stored in? This folder should contain a structure of ARCH/CODENAME,\nwhere ARCH is the CPU arch of the chroot, and codename is the codename of the OS in the chroot.")
	BUILD_PREFIX=$(ask "Where would you like the ISOs to be built? Default is /tmp/build.")
	BUILD_PREFIX=${BUILD_PREFIX:-"/tmp/build"}
	ISO_PREFIX=$(ask "Where would you like the ISOs to be stored? Default is ~/Downloads.")
	ISO_PREFIX=${ISO_PREFIX:-"$HOME/Downloads"}
	KERNEL=$(ask "What kernel would you like to use? Default is linux-drauger.")
	KERNEL=${KERNEL:-"linux-drauger"}
	builtin echo -e "# Make-ISO config
# Don't end file paths with forward-slashes
# Chroot location
CHROOT_PREFIX=$CHROOT_PREFIX
# Location to build ISOs
BUILD_PREFIX=$BUILD_PREFIX
# Location to store ISOs
ISO_PREFIX=$ISO_PREFIX
# Kernel to use
KERNEL=$KERNEL" > $HOME/.config/drauger/make-iso.conf
fi

needed=""
if ! $(which mksquashfs 1>/dev/null 2>/dev/null); then
	needed="squashfs-tools"
fi
if ! $(which grub-mkstandalone 1>/dev/null 2>/dev/null); then
	needed="$needed grub-common"
fi
if ! $(which xorriso 1>/dev/null 2>/dev/null); then
	needed="$needed xorriso"
fi
if ! $(which zenity 1>/dev/null 2>/dev/null); then
	needed="$needed zenity"
fi
if ! $(which notify-send 1>/dev/null 2>/dev/null); then
	needed="$needed libnotify-bin"
fi
if ! $(which mmd 1>/dev/null 2>/dev/null); then
	needed="$needed mtools"
fi
if ! $(which mkfs.vfat 1>/dev/null 2>/dev/null); then
	needed="$needed dosfstool"
fi
if [ ! -f /usr/lib/grub/x86_64-efi/modinfo.sh ]; then
	needed="$needed grub-efi-amd64-bin"
fi
if [ ! -f /usr/lib/grub/i386-pc/modinfo.sh ]; then
	needed="$needed grub-pc-bin"
fi
if [ ! -f /usr/bin/find ]; then
	needed="$needed findutils"
fi
if [ ! -f /usr/bin/arch-chroot ]; then
	needed="$needed arch-chroot"
fi
if [[ "$needed" != "" ]]; then
	echo "Error: Missing depedencies. Please install the following packages to use this script." 1>&2
	echo "Depedencies:" 1>&2
	echo "$needed" 1>&2
	exit 2
fi

clean () {
	echo "Cleaning Build Prefix . . . "
	rm -rfv $BUILD_PREFIX
	echo "Done"
	mkdir -p $BUILD_PREFIX
	if [ "$1" == "" ]; then
		exit
	fi
}

ARCH="$1"
CODENAME="$2"

if [ "$ARCH" == "arm" ] || [ "$ARCH" == "arm64" ] || [ "$ARCH" == "ARM" ] || [ "$ARCH" == "ARM64" ]; then
	ARCH="ARM64"
elif [ "$ARCH" == "-h" ] || [ "$ARCH" == "--help" ]; then
	echo -e "
make-iso [--help, --clean] [ARCH] [CODENAME]
		Pass the Arch and the codename to build an ISO for that version of Drauger OS,
		provided the chroot is in the correct location.


	-c, --clean	Clean build directory
	-h, --help	Print this help dialoge and exit.

"
	exit 0
elif [ "$ARCH" == "-c" ] || [ "$ARCH" == "--clean" ]; then
	clean
else
	ARCH="AMD64"
fi


CHROOT_LOCATION="$CHROOT_PREFIX/$ARCH/$CODENAME"
# This will probably get deleted later
#if [ "$ARCH" == "--override" ]; then
#CHROOT_LOCATION="/home/batcastle/Downloads/ISOS/DONE/Drauger_OS-7.5.1-TRASH-AMD64/live/chroot"
#fi

read -p "Please make sure that you only have one kernel installed. Press enter when you are sure this is the case inside the chroot.
Furthermore, please ensure that /proc has been unmounted." ans

function_makeiso () {
	notify "Making $ARCH ISO"
	if [ ! -d "$BUILD_PREFIX" ]; then
		mkdir -p "$BUILD_PREFIX"
	fi
	cd $BUILD_PREFIX
	VERSION=$(cat $CHROOT_LOCATION/etc/lsb-release | grep 'DISTRIB_RELEASE=' | sed 's/DISTRIB_RELEASE=//g')
	#clean up the chroot
	{
		sudo arch-chroot "$CHROOT_LOCATION" flatpak repair
	} || {
		unmount
		sudo arch-chroot "$CHROOT_LOCATION" flatpak repair
	}
	sudo rm -rfv $CHROOT_LOCATION/var/crash/* $CHROOT_LOCATION/root/* $CHROOT_LOCATION/home/live/.bash_history $CHROOT_LOCATION/var/log/*
	sudo rm -rfv $CHROOT_LOCATION/tmp/* $CHROOT_LOCATION/var/lib/apt/lists/* $CHROOT_LOCATION/home/live/.kde/cache-*/* $CHROOT_LOCATION/home/live/.kde4/cache-*/*
	sudo rm -rfv $CHROOT_LOCATION/home/live/.kde/tmp-*/* $CHROOT_LOCATION/home/live/.kde4/tmp-*/*
	sudo find $CHROOT_LOCATION/* -depth -name '__pycache__' -exec rm -rfv {} +
	sudo find $CHROOT_LOCATION/*  -depth -name '*.dpkg-old' -exec rm -rfv {} +
	{
		sudo arch-chroot "$CHROOT_LOCATION" apt clean
	} || {
		unmount
		sudo arch-chroot "$CHROOT_LOCATION" apt clean
	}
	unmount
	{
		sudo arch-chroot "$CHROOT_LOCATION" apt -y autopurge
	} || {
		unmount
		sudo arch-chroot "$CHROOT_LOCATION" apt -y autopurge
	}
	unmount
	sudo rm -rfv $CHROOT_LOCATION/var/cache/*
	#make work files
	mkdir -p $BUILD_PREFIX/scratch/EFI/EFI/BOOT $BUILD_PREFIX/image/live
	mkdir -p $BUILD_PREFIX/scratch/EFI/loader/entries
	notify "Making Squashfs"
	#make Squashfs from chroot
	sudo mksquashfs $CHROOT_LOCATION $BUILD_PREFIX/image/live/filesystem.squashfs -comp xz -Xbcj x86 -Xdict-size 8k -e boot && notify "Squashfs Completed"
	#copy initrd and kernel
	cp -v $CHROOT_LOCATION/boot/vmlinuz-* $BUILD_PREFIX/image/vmlinuz
	cp -v $CHROOT_LOCATION/boot/vmlinuz-* $BUILD_PREFIX/scratch/EFI/vmlinuz
	cp -v $CHROOT_LOCATION/boot/initrd.img-* $BUILD_PREFIX/image/initrd || cp -v $CHROOT_LOCATION/boot/initrd.img $BUILD_PREFIX/image/initrd
	cp -v $CHROOT_LOCATION/boot/initrd.img-* $BUILD_PREFIX/scratch/EFI/initrd || cp -v $CHROOT_LOCATION/boot/initrd.img $BUILD_PREFIX/scratch/EFI/initrd
	echo -e "search --set=root --file /DRAUGER_OS

insmod all_video

set default=\"0\"\nset timeout=30

menuentry \"Install Drauger OS $VERSION\" {
	linux /vmlinuz boot=live quiet splash edamame
	initrd /initrd
}

menuentry \"Install Drauger OS $VERSION Using Safe Graphics Mode (nomodeset)\" {
	linux /vmlinuz boot=live quiet splash nomodeset edamame
	initrd /initrd
}

menuentry \"Try Drauger OS $VERSION\" {
	linux /vmlinuz boot=live quiet splash
	initrd /initrd
}

menuentry \"Try Drauger OS $VERSION Using Safe Graphics Mode (nomodeset)\" {
	linux /vmlinuz boot=live quiet splash nomodeset
	initrd /initrd
}


EOF" > $BUILD_PREFIX/scratch/grub.cfg
	touch "$BUILD_PREFIX/image/DRAUGER_OS"
	notify "Setting up for EFI"
	#setup for EFI
	#grub-mkstandalone --format=x86_64-efi --output=$BUILD_PREFIX/scratch/bootx64.efi --locales="" --fonts=""  "boot/grub/grub.cfg=$BUILD_PREFIX/scratch/grub.cfg"
	cp -v /usr/lib/systemd/boot/efi/systemd-bootx64.efi "$BUILD_PREFIX/scratch/EFI/EFI/BOOT/bootx64.efi"
	cp -v /usr/lib/systemd/boot/efi/systemd-bootx64.efi "$BUILD_PREFIX/scratch/EFI/EFI/BOOT/boot.efi"
	echo "default Drauger_OS.conf
timeout 30
editor 1
" > $BUILD_PREFIX/scratch/EFI/loader/loader.conf

	echo "title  Try Drauger_OS $VERSION
linux   /vmlinuz
initrd  /initrd
options boot=live ro rd.luks=0 rd.md=0 rd.live.overlay.overlayfs=1 quiet splash
" > $BUILD_PREFIX/scratch/EFI/loader/entries/Drauger_OS.conf

echo "title  Try Drauger_OS $VERSION (RAMDISK)
linux   /vmlinuz
initrd  /initrd
options boot=live ro rd.luks=0 rd.md=0 rd.live.overlay.overlayfs=1 quiet splash toram
" > $BUILD_PREFIX/scratch/EFI/loader/entries/Drauger_OS_ramdisk.conf

	echo "title  Try Drauger_OS $VERSION Using Safe Graphics Mode (nomodeset)
linux   /vmlinuz
initrd  /initrd
options boot=live ro rd.luks=0 rd.md=0 rd.live.overlay.overlayfs=1 quiet splash nomodeset
" > $BUILD_PREFIX/scratch/EFI/loader/entries/Drauger_OS_nomodeset.conf

	echo "title  Install Drauger_OS $VERSION
linux   /vmlinuz
initrd  /initrd
options boot=live ro rd.luks=0 rd.md=0 rd.live.overlay.overlayfs=1 quiet splash edamame
" > $BUILD_PREFIX/scratch/EFI/loader/entries/Drauger_OS_install.conf

	echo "title  Install Drauger_OS $VERSION Using Safe Graphics Mode (nomodeset)
linux   /vmlinuz
initrd  /initrd
options boot=live ro rd.luks=0 rd.md=0 rd.live.overlay.overlayfs=1 quiet splash nomodeset edamame
" > $BUILD_PREFIX/scratch/EFI/loader/entries/Drauger_OS_install_nomodeset.conf
	cd $BUILD_PREFIX/scratch
	dd if=/dev/zero of=efi.img bs=1M count=250
	mkfs.vfat efi.img
	# mmd -i efi.img -s EFI/* EFI/BOOT
	mcopy -i efi.img -s EFI/* ::
	notify "Setting up for BIOS"
	#setup for BIOS
	grub-mkstandalone --format=i386-pc --output=$BUILD_PREFIX/scratch/core.img --compress=xz --install-modules="linux normal iso9660 biosdisk memdisk fat part_msdos part_gpt search tar ls" --modules="fat part_msdos part_gpt linux normal iso9660 biosdisk search" --locales="" --fonts=""  "boot/grub/grub.cfg=$BUILD_PREFIX/scratch/grub.cfg"
	cat /usr/lib/grub/i386-pc/cdboot.img $BUILD_PREFIX/scratch/core.img > $BUILD_PREFIX/scratch/bios.img
	# MAKE DEB REPO
	notify "Setting up local deb repo"
	mkdir -p $BUILD_PREFIX/image/repo
	base="$PWD"
	sudo chroot $CHROOT_LOCATION apt-get update
	deps=$(sudo chroot "$CHROOT_LOCATION" apt-cache depends "$KERNEL")
	deps=$(echo "$deps" | grep 'Depends:' | awk '{print $2}')
    	deps="$deps $KERNEL systemd-boot-manager systemd-boot python3-lib2to3 systemd-boot-efi efibootmgr"
	cd $BUILD_PREFIX/image/repo
	sudo chroot $CHROOT_LOCATION apt-get download $deps
	sudo chroot $CHROOT_LOCATION apt-get clean
	sudo mv -v $CHROOT_LOCATION/*.deb .
	cd "$base"
	# DONE MAKING REPO
	#make the ISO
	notify "Name ISO Please"
	output=$(ask "What would you like to name the new ISO?")
	notify "Making ISO"
	if [ -f "$ISO_PREFIX/$output-$ARCH.iso" ]; then
		rm -fv "$ISO_PREFIX/$output-$ARCH.iso"
	fi
	xorriso -as mkisofs -iso-level 2 -full-iso9660-filenames -volid "Drauger_OS_$VERSION" --md5 -eltorito-boot boot/grub/bios.img -no-emul-boot \
	-boot-load-size 4 -boot-info-table --eltorito-catalog boot/grub/boot.cat --grub2-boot-info --grub2-mbr /usr/lib/grub/i386-pc/boot_hybrid.img \
	-eltorito-alt-boot -e efi.img -no-emul-boot -append_partition 2 0xef "$BUILD_PREFIX/scratch/efi.img" -output "$ISO_PREFIX/$output-$ARCH.iso" \
	-graft-points "$BUILD_PREFIX/image" /boot/grub/bios.img="$BUILD_PREFIX/scratch/bios.img" efi.img="$BUILD_PREFIX/scratch/efi.img" \
    /boot/grub/grub.cfg=$BUILD_PREFIX/scratch/grub.cfg && (echo -e "\nISO Completed!\n"; notify "ISO Completed!")
    chmod 644 "$ISO_PREFIX/$output-$ARCH.iso"
	clean 0
}

{ time function_makeiso 2>&1; } 2>"$HOME/.time.log"
min=$(cat $HOME/.time.log | grep 'real' | sed 's/real\t//g' | sed 's/m.*//g')
sec=$(cat $HOME/.time.log | grep 'real' | sed 's/.*m//g' | sed 's/s//g')
if [ ! -f $HOME/Documents/.running-time.log ]; then
	echo -e "Drauger OS Development Time Log\nDO NOT MODIFY OR DELETE\nMINUTES\tSECONDS" > $HOME/Documents/.running-time.log
fi
echo -e "$min\t$sec" >> $HOME/Documents/.running-time.log
echo -e "\nTime Logged\n"
